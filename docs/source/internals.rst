PythonScript internals
######################

.. warning:: The code still use the old naming where PythonJS is the subset of Python that is actually translated to Javascript and PythonScript the language implemented on top of it.

Big picture
===========

This might not make sens right now, but you can read it nonetheless and as you read what follows you will get the point:

Compilation
-----------

::

   Python -> PythonToPythonJS -> PythonJS -> JSGenerator -> Javascript



This is the description of ``pythonscript`` command.

.. versionchanged:: 0.7
   There is now ``python_to_pythonjs`` command that allow you to review the python code generated before it's converted to javascript

How does it executes ?
======================

To run, a python file translated by ``pythonscript`` must come after ``pythonscript.js`` which is ``pythonpythonjs.py`` that is translated by ``pythonjs`` command.

In the following we will see in order:

* ``pythonjs`` the translator that maps a subset of Python to a subset of Javascript.
* ``pythonpython.py`` which is the runtime library which is used by translated ``.py`` (except itself) to run.
* ``pythonscript`` which is the command can generate a ``.js`` file that given the functions defined in ``pythonpython.py`` and possibly other objects available at runtime time can execute in a browser.



``pythonjs``
------------

``pythonjs`` command knows how to translate:

- Restricted Python functions to Javascript
- It handles attribute access e.g. ``spam.egg.foobarbaz``
- Add brackets and semi-colons
- ``print(foo, bar, flower)`` are converted to ``console.log(foo, bar, flower)``
- ``for i in jsrange(int)`` are converted to Javascript for loops

It also support two special functions ``JS(str)`` and ``var(*args)``:


``JS(str)``
~~~~~~~~~~~

``pythonjs`` will inline the content of the string in the output of the translation. Which means that, the following:

.. code-block:: python

   d = JS('new Array()')
   d.push(1)

Will be translated to the following Javascript code:

.. code-block:: javascript

   d = new Array();
   d.push(1)

This makes possible to:

- Support Javascript syntax that is not supported by Python.
- Bypass translation process as it will be shown later.

As matter of fact that is the function which is used to create bindings of DOM API or javascript libraries.


``var(*args)``
~~~~~~~~~~~~~~

It will take all the arguments that are given and ``var`` them. For instance the following code:

.. code-block:: python

   var(spam, egg)
   spam = 1
   egg = spam + 2
   print spam, egg

Will be translated to the following javascript code:

.. code-block:: javascript

   var spam, egg;
   spam = 1;
   egg = spam + 2;
   console.log(spam, egg)

This allows to take control of variable scope definition which is in Javascript by default global, otherwise said ``var`` makes variables local which what you want most of the time. This is needed given the way PythonScript works, it doesn't emulate Python scope definition instead it use Javascript one, and ``var`` is needed to make it possible to actually write code that works (just like it's needed in Javascript).

``pythonpythonjs.py``
---------------------

This is Python written in PythonJS, the actual Python subset that can be translated to Javascript, the one presented just before. It defines a certain number of functions that allows to emulate Python behavior like ``class``, ``getattr``, ``setattr`` and other things that are needed by the *emulation* process.

In the following you will find all the functions that are defined in ``pythonpythonjs.py``:

``jsrange(int)``
~~~~~~~~~~~~~~~~

Create an array of integers that can be iterated over by the ``for`` loop generated by pythonjs. This is similar in principle to Python ``range`` but not actually the same since it doesn't ``pythonjs`` ``for`` loop doesn't handle iterable classes (since no class exists at this level).


``create_arrary(*args)``
~~~~~~~~~~~~~~~~~~~~~~~~

``create_array`` will create a Javascript array with ``args``. This function circunvent a behavior in Javascript where ``new Array(42)`` and ``new Array(42, 24)`` behaves differently.


``adapt_arguments()``
~~~~~~~~~~~~~~~~~~~~~

It's somekind of decorator in the sens that it takes a function as argument and change wrap it in a function that change the arguments of the function to be compatible with the arguments scheme of functions generated from Python.


``create_class(class_name, parents, attrs)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the function that is called when you call ``type`` from Python code, it build the class which actually means to create a javascript object and populating with some information. It also check for the presence ``__metaclass__`` *in the current class definition* (read: not the bases) so that the user can hook it's own class constructor.


``get_attribute(object, attribute)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the internal ``getattr`` which is used to fetch attributes every time you use the dot notation. It's in this function that must come the code that implements ``__getattribute__`` and ``__getattr__`` hook. Currently it handles:

- data descriptors
- method access
- property access


``set_attribute(object, attribute, value)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the internal ``setattr`` which is used to set attributes.

``get_arguments(signature, args, kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the function used in every function (or method) call to retrieve actual parameters given args and kwargs and a signature.


``type(args, kwargs)``
~~~~~~~~~~~~~~~~~~~~~~

This is the function that is callable from Python code and does create a class «dynamically». It converts its arguments to be compatible with ``create_class``.


``getattr(args, kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~

This is the function that is callable from Python code and does fetch the attribute of an object . It converts its arguments to be compatible with ``get_attribute``.


``setattr(args, kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~

This is the function that is callable from Python code and does set an attribute of an object to a value. It converts its arguments to be compatible with ``set_attribute``.
